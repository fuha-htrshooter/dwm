ステータスバーの区切り文字を認識し、領域毎に別コマンドを実行できるようにする。
押したい場所がextrabar領域だったので、extrabarパッチに依存。
基本的に自分環境用に合わせてあるdirtyなpatchなので、
興味を持ったという奇特な人は手動適用でどうぞ。

--- a/config.def.h	2021-02-20 04:27:03.429318971 +0900
+++ b/config.def.h	2021-02-20 04:25:43.756040133 +0900
@@ -6,6 +6,7 @@
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
 static const char statussep         = ';';      /* separator between status bars */
+static const char stmbtn_sep        = '|';
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
 static const char col_gray1[]       = "#222222";
@@ -64,6 +65,19 @@
 static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
 static const char *termcmd[]  = { "st", NULL };
 
+enum { StbtnDate, StbtnEnd };
+static const char *stmbtn_cmds[][StbtnEnd][9] = {
+	{ /* Button1 */
+		[StbtnDate] = { "notify-send Mouse Button1", NULL },
+	},
+	{ /* Button2 */
+		[StbtnDate] = { "notify-send Mouse Button2", NULL },
+	},
+	{ /* Button3 */
+		[StbtnDate] = { "notify-send Mouse Button3", NULL },
+	},
+};
+
 static Key keys[] = {
 	/* modifier                     key        function        argument */
 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
@@ -110,7 +124,9 @@
 	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
 	{ ClkWinTitle,          0,              Button1,        togglewin,      {0} },
 	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
-	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
+	{ ClkStatusText,        0,              Button1,        stmbutton,      {.v = stmbtn_cmds[0] },
+	{ ClkStatusText,        0,              Button2,        stmbutton,      {.v = stmbtn_cmds[1] },
+	{ ClkStatusText,        0,              Button3,        stmbutton,      {.v = stmbtn_cmds[2] },
 	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
 	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
 	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
--- a/dwm.c	2021-02-18 08:24:01.349675071 +0900
+++ b/dwm.c	2021-02-20 04:05:11.723976990 +0900
@@ -156,6 +156,7 @@
 static void toggleAttachBelow();
 static void attachstack(Client *c);
 static void buttonpress(XEvent *e);
+static void stmbtn_judge(char *text, int x, XButtonPressedEvent *ev);
 static void checkotherwm(void);
 static void cleanup(void);
 static void cleanupmon(Monitor *mon);
@@ -214,6 +215,7 @@
 static void show(Client *c);
 static void showhide(Client *c);
 static void sigchld(int unused);
+static void stmbutton(const Arg *arg);
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
@@ -248,6 +250,7 @@
 static const char broken[] = "broken";
 static char stext[256];
 static char estext[256];
+static int stmbtn_clkn;
 static int screen;
 static int sw, sh;           /* X display screen geometry width, height */
 static int bh, blw = 0;      /* bar geometry */
@@ -471,9 +474,12 @@
 		} else if (ev->x < x + blw)
 			click = ClkLtSymbol;
 		/* 2px right padding */
-		else if (ev->x > selmon->ww - (int)TEXTW(stext) + lrpad - 2)
+		else if (ev->x > selmon->ww - (int)TEXTW(stext) + lrpad - 2) {
 			click = ClkStatusText;
-		else {
+
+			stmbtn_clkn = 0;
+			stmbtn_judge(stext, selmon->ww - (int)TEXTW(stext) + lrpad - 2, ev);
+		} else {
 			x += blw;
 			c = m->clients;
 
@@ -489,6 +495,14 @@
 				arg.v = c;
 			}
 		}
+	} else if (ev->window == selmon->extrabarwin) {
+		click = ClkStatusText;
+
+		stmbtn_clkn = 1;
+		for (i = 0; i < strlen(stext); i++)
+			if (stext[i] == stmbtn_sep)
+				stmbtn_clkn++;
+		stmbtn_judge(estext, 0, ev);
 	} else if ((c = wintoclient(ev->window))) {
 		focus(c);
 		restack(selmon);
@@ -502,6 +516,24 @@
 }
 
 void
+stmbtn_judge(char *text, int x, XButtonPressedEvent *ev)
+{
+	int i, j = 0;
+
+	for (i = 0; i < strlen(text); i++) {
+		if (text[i] == stmbtn_sep) {
+			text[i] = 0;
+			x += TEXTW(text + j) - lrpad;
+			text[i] = stmbtn_sep;
+			j = i;
+			if (x > ev->x)
+				break;
+			stmbtn_clkn++;
+		}
+	}
+}
+
+void
 checkotherwm(void)
 {
 	xerrorxlib = XSetErrorHandler(xerrorstart);
@@ -1757,6 +1789,17 @@
 }
 
 void
+stmbutton(const Arg *arg)
+{
+	if (LENGTH(*stmbtn_cmds) <= stmbtn_clkn)
+		return;
+	Arg sa = { .v = (char*)arg->v + stmbtn_clkn * LENGTH(**stmbtn_cmds) * sizeof(char*) };
+	if (((char **)sa.v)[0] == NULL)
+		return;
+	spawn(&sa);
+}
+
+void
 spawn(const Arg *arg)
 {
 	if (arg->v == dmenucmd)
